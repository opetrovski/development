/*******************************************************************************
 *                                                                              
 *  Copyright FUJITSU LIMITED 2017
 *                                                                                                                                 
 *  Creation Date: Sep 20, 2012                                                      
 *                                                                              
 *******************************************************************************/

package org.oscm.reportingservice.business;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.oscm.converter.DateConverter;
import org.oscm.domobjects.Organization;
import org.oscm.domobjects.PlatformUser;
import org.oscm.reportingservice.business.model.billing.VOReportResult;
import org.oscm.reportingservice.dao.CustomerEventData;
import org.oscm.reportingservice.dao.EventDao;
import org.oscm.reportingservice.dao.SubscriptionDao;
import org.oscm.reportingservice.dao.UnitDao;

/**
 * @author kulle
 * 
 */
public class CustomerEventReport {

    private final EventDao eventDao;
    private final SubscriptionDao subscriptionDao;
    private final UnitDao unitDao;

    public CustomerEventReport(EventDao eventDao,
            SubscriptionDao subscriptionDao, UnitDao unitDao) {
        this.eventDao = eventDao;
        this.subscriptionDao = subscriptionDao;
        this.unitDao = unitDao;
    }

    /**
     * Creates the customer event report containing events generated by the
     * customer's subscriptions (instances). In case the calling user has only
     * unit administrator role, the list contains the events only for
     * subscriptions currently assigned to the units he is allowed to
     * administrate.
     * 
     * @throws ParserConfigurationException
     */
    public void buildReport(VOReportResult result, PlatformUser user,
            String defaultLocale) throws ParserConfigurationException {

        result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());
        Organization organization = user.getOrganization();
        String organizationId = organization.getOrganizationId();
        List<CustomerEventData> dataList = new ArrayList<CustomerEventData>();
        if (user.isUnitAdmin() && !user.isOrganizationAdmin()) {
            List<Long> unitKeys = unitDao.retrieveUnitKeysForUnitAdmin(user
                    .getKey());
            dataList = eventDao.retrieveCustomerEventData(organizationId,
                    unitKeys);
        } else {
            dataList = eventDao.retrieveCustomerEventData(organizationId);
        }

        updateEventDescriptionsUsingUserLocale(organizationId,
                user.getLocale(), dataList);
        updateEventDescriptionsUsingDefaultLocale(organizationId,
                defaultLocale, dataList);
        convertEventDataToXmlResult(result.getData(), dataList);
    }

    private void updateEventDescriptionsUsingDefaultLocale(
            String organizationId, String defaultLocale,
            List<CustomerEventData> dataList) {
        List<CustomerEventData> defaultLocaleData = eventDao
                .retrieveLocalizedCustomerEventData(organizationId,
                        defaultLocale);
        for (CustomerEventData row : defaultLocaleData) {
            if (dataList.contains(row)) {
                CustomerEventData present = dataList.get(dataList.indexOf(row));
                if (present.getLocale() == null) {
                    present.setLocale(row.getLocale());
                    present.setEventdescription(row.getEventdescription());
                }
            }
        }
    }

    private void updateEventDescriptionsUsingUserLocale(String organizationId,
            String userLocale, List<CustomerEventData> dataList) {
        List<CustomerEventData> userLocaleData = eventDao
                .retrieveLocalizedCustomerEventData(organizationId, userLocale);
        for (CustomerEventData row : userLocaleData) {
            if (dataList.contains(row)) {
                CustomerEventData present = dataList.get(dataList.indexOf(row));
                present.setLocale(row.getLocale());
                present.setEventdescription(row.getEventdescription());
            }
        }
    }

    void convertEventDataToXmlResult(List<Object> result,
            List<CustomerEventData> dataList)
            throws ParserConfigurationException {
        Document document = newEmptyDocument();
        Map<String, String> lastSubIdMap = subscriptionDao
                .retrieveLastValidSubscriptionIdMap();
        for (CustomerEventData current : dataList) {
            Element row = document.createElement("row");
            appendToRowElement(document, row, "ACTOR", current.getActor());
            appendToRowElement(document, row, "TYPE", current.getType());
            appendToRowElement(document, row, "EVENTIDENTIFIER",
                    current.getEventidentifier());
            appendToRowElement(document, row, "MULTIPLIER",
                    String.valueOf(current.getMultiplier()));
            appendToRowElement(document, row, "PRODUCTID", current
                    .getProductid().split("#")[0]);
            appendToRowElement(document, row, "OCCURENCETIME",
                    String.valueOf(DateConverter.convertLongToDateTimeFormat(
                            current.getOccurrencetime(), TimeZone.getDefault(),
                            DateConverter.DTP_WITHOUT_MILLIS)));
            appendToRowElement(document, row, "FIRSTNAME",
                    current.getFirstname());
            appendToRowElement(document, row, "LASTNAME", current.getLastname());
            appendToRowElement(document, row, "SUBSCRIPTIONID",
                    lastSubIdMap.get(current.getSubscriptionid()));
            appendToRowElement(document, row, "SUBSCRIPTIONTKEY",
                    String.valueOf(current.getSubscriptiontkey()));
            appendToRowElement(document, row, "EVENTDESCRIPTION",
                    current.getEventdescription());
            appendToRowElement(document, row, "LOCALE", current.getLocale());
            result.add(row);
        }
    }

    private Document newEmptyDocument() throws ParserConfigurationException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.newDocument();
    }

    private void appendToRowElement(Document document, Element row,
            String nodeName, String nodeValue) {
        if (nodeValue == null) {
            nodeValue = "";
        }
        Node n = document.createElement(nodeName.toUpperCase());
        n.appendChild(document.createTextNode(nodeValue));
        row.appendChild(n);
    }

}
